#! /bin/bash
set -e

GF_VERSION=0.3-git
GF_MAINTAINER="@ 2013 Marko Rakamaric"
GF_BINARY="gfetch"
GF_DESCRIPTION="Mail retriver and checker for Gmail"

usage(){
cat << EOF  
Usage: $GF_BINARY <action>
	 
${G}Daemon actions:${N}	
  ${W}-D --daemon${N}      start daemon
  ${W}-k --kill${N}        kill gfetch

${G}Standard actions:${N}	
  ${W}(c)heck${N}          check mail
  ${W}(l)ist${N}           list mails
EOF
}

version(){
cat << EOF
     This is  : $GF_BINARY
     Version  : $GF_VERSION
 Description  : $GF_DESCRIPTION
   Copyright  : $GF_MAINTAINER
     License  : GNU General Public License, version 3 or later
EOF
}

info(){
	local i="$1"
	case $i in
		-i ) printf "%s\n" " ${G}*${N} $2" 	;; 
		-y ) printf "%s\n" " ${Y}*${N} $2" 	;; 
		-a ) printf "%s\n" " >>> $2" ;; 
	esac
}

die(){ printf "%s\n" " ${R}!!! Error:${N} $1"; exit "$?"; } # exit 

# define some colors
W="$(tput bold)$(tput setaf 7)"
R="$(tput bold)$(tput setaf 1)"
G="$(tput bold)$(tput setaf 2)"
Y="$(tput bold)$(tput setaf 3)"
N="$(tput sgr0)"

# format html: &lt,&gt;$amp;&quot
replace_unwanted_characters(){
	echo "$1" | sed \
		-e "s|&quot;|\"|g" \
		-e "s|&lt;|<|g" \
		-e "s|&gt;|>|g" \
		-e "s|&amp;|\&|g"
		return 
}

shrink_subject(){
		local sub="${1}" trim_sub spaces

		if [[ ${#sub} -gt $OSD_MAX_SUBJECT_WIDTH ]]; then
			sub="${sub}"
			trim_sub="${sub:0:(-$OSD_MAX_SUBJECT_WIDTH)}"
			spaces=$(tr -cd ' ' <<< ${trim_sub} | wc -c)
			subject=$(echo "$sub" | sed "s| |\n|$spaces")
		fi
		return
}
_replace_(){ echo "$1" | sed "s|$stag||" | sed "s|$etag||";}

_strip_html_tags_(){
		local action="${1}" tag="${2}" stag etag
		
		for i in ${action[@]}; do 
		case $i in 
			sender ) stag="<name>"; etag="</name>"; sender=$(_replace_ "$sender") ;;
			subject ) stag="<title>"; etag="</title>"; subject=$(_replace_ "$subject") ;;
			email )  stag="<email>"; etag="</email>"; email=$(_replace_ "$email") ;;
		esac
		done
		return
}

is_running(){ [[ $(pgrep -x $1) ]] && return 1 || return 0 ; }

rm_obsolte(){	for i in $tmpdir/*; do 	rm $i; done; }

kill_daemon(){ rm_obsolte; pkill gfetch; }

d_err(){ [[ $1 = 1 ]] && die "$0 daemon already running" || die "$0 isn't started" ; }

get_pid(){ ! [[ -f $pid ]] && echo $$ > $pid || return 0; }

readcfg(){
	
		if [[ -f $cfg ]]; then
			source $cfg 
		else
			die "No config file, please copy default to ${W}$HOME${N}"
		fi
}

network_carrier_status(){

	local gateway=$(ip route | awk '{print $3}' | head -n 1)
	local dev=$(ip route | awk '{print $5}' | head -n 1)

	! [[ $gateway ]] && return
	[[ $( cat /sys/class/net/$dev/carrier ) = 1 ]] && online=1

}

checkmail(){
	readcfg

  [[ -f $mail ]] && mv "$mail" "$_mail"
	
	wget -q --secure-protocol=TLSv1 --no-check-certificate \
		--user=$USERNAME --password=$PASSWORD \
		https://mail.google.com/mail/feed/atom -O - | \
	sed 's|<contributor>.*</contributor>||g' | \
	grep -ioE "<name[^>]*>[^<]*</name>|<title[^>]*>[^<]*</title>|<email[^>]*>[^<]*</email>" | sed 1d > $mail
	
	# create copy of mail bit with titles only, I use this because of easier calucaltion of mails
	grep -ioE "<title[^>]*>[^<]*</title>" $mail > $mailcount_tmp

	! (( $FORCE )) && if [[ -f $_mail ]]; then diff "$mail" "$_mail" && return; fi
	mailcount=$( wc -l $mailcount_tmp | awk '{print $1}')
	[[ -f $_mail ]]	&& omailcount=$( wc -l $_mail | awk '{print $1}' )
 
  if [[ $mailcount -ge 0 ]]; then

		# if we have 0 mails, redirect mailcount to $mcout
      echo -e $mailcount > "$mcount"

    if [[ $mailcount -gt 0 ]]; then
			
      echo -e $mailcount > "$mcount"

			# passing cmdline c to force check
			(( $FORCE )) && info -i "You have ${W}$( cat $mcount )${N} new mails" && exit 0

			# don't show notify or sound if we already readed some mails
			[[ $iter -gt 1 ]] &&	[[ $mailcount -lt $omailcount ]] && OSD="False" && SOUND="False" 

			if [[ $OSD = "True" ]] && ! (( $FORCE )); then
						
				while read -r subject; read -r sender; read -r email; do
						
						_strip_html_tags_ "sender subject"
						replace_unwanted_characters "$subject"
						replace_unwanted_characters "$sender"
						shrink_subject "$subject"
						
						[[ ${OSD_SHOW_SENDER_EMAIL} == "True" ]] && \
						_strip_html_tags_ "email" && \
							email=(" <i>${email}</i>") || email=""

						notify-send -a $GF_BINARY -t "$OSD_TIMEOUT" "$OSDTEXT [$mailcount]" \
							"\n<b>From:</b> $sender $email\n<b>Subject:</b> $subject"	
					done < <(sed -n 1,3p $mail )

	    fi	  
    
			if [[ $SOUND == "True" && -f "$WAV_FILE" ]] && ! (( $FORCE ));then 
				 aplay "$WAV_FILE" &> /dev/null
			fi

		fi
  
	else
		# we need some kind of info when we have some Err while fetching
    echo -e "Err" > "$mcount"
  fi
}

output_align(){
	# INFO: lcolumn(left colum max width), 
	# space(blank space between left and right column)
	local action="${#1}" space=10 lcolumn=20
	indent=$( expr $lcolumn - $action + $space )
}

write_list_output(){
	# INFO: print to stdout based on line number
	local sender=${1} title=${2}
	
	[[ $lnb -lt 10 ]] && \
		printf "%s%-${indent}s%s\n" "  $W[$(( lnb++ ))]  ${G}${sender}${N}" "" "${title}" || \
		printf "%s%-${indent}s%s\n" " $W[$(( lnb++ ))]  ${G}${sender}${N}" "" "${title}"
	return 0
}


list_mail(){
	readcfg
	
	lnb=1
	mailcount=$( wc -l $mailcount_tmp | awk '{print $1}')	

	if	[[ $mailcount -lt 1 ]] ; then 
		info -y "No new mails!" && exit 0
	else
		# we have new mails
		newmail=1
		info -i "New mails for ${Y}"$MAILBOX"${N}"
	fi

	while read -r subject; read -r sender; read -r email; do

		_strip_html_tags_ "sender subject"
		subject=$(replace_unwanted_characters "$subject")
		sender=$(replace_unwanted_characters "$sender")

		! [[ -z $sender ]] && \
			output_align "$sender" && \
			write_list_output "$sender" "$subject" && \
			unset sender subject email

	done < $mail

	(( $newmail )) &&  info -y "Total new mails: ${W}$(expr $lnb - 1 )${N}" 
	
}

_daemon(){
	iter=0
	while true; do
		# NOTE: pid is wrong, use pgrep -x gfetch instead
		get_pid	
		network_carrier_status
		(( $online )) && checkmail && sleep ${INTERVAL:=300} || iter=0 && sleep 10 

	iter=$((iter+1))
	done 
}

cfg="$HOME/.gfetchrc"
tmpdir="/tmp/gfetch"
mailcount_tmp="$tmpdir/mailcounter.tmp"
mcount="$tmpdir/mcount"
mail="$tmpdir/newmails.txt"
_mail="$tmpdir/oldmails.txt"
pid="$tmpdir/gfetch.pid"

ARGS=("$@")
for i in ${ARGS[@]}; do
	[[ "$i" =~ ^[a-z] ]] && OPTS+=("$i")
	[[ "$i" =~ ^--[a-z] ]] && OPTS+=("$i")
	[[ "$i" =~ ^-[a-zA-Z] ]] && OPTS+=("$i")
done

# crate dir if it doens't exist
! [[ -e $tmpdir  ]] && mkdir -p "$tmpdir"

# if there is no argument given show us usage
[[ $# -lt 1 ]] && usage && exit 0

case $OPTS in
  -D | --daemon  ) is_running "gfetch" && d_err 1;
								   #nohup $0 --config "$cfg" &> /dev/null & exit 0 ;;
								 	 readcfg;
								   _daemon  &> /dev/null & ;;
	-k | --kill    ) ! is_running $pid && d_err 2 ;
								   kill_daemon ;;
   c | check     ) ! is_running $pid && d_err 2;
									 FORCE=1; checkmail ;;
	 l | list      ) ! is_running $pid && d_err 2;
									 list_mail && exit 0 ;;
	-v | --version ) version && exit 0 ;;
							 * ) die " Unerocgnized command!!" ;;
esac

